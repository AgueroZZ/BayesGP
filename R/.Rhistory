knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>", fig.height=3, fig.width=5, margins=TRUE
)
knitr::knit_hooks$set(margins = function(before, options, envir) {
if (!before) return()
graphics::par(mar = c(1.5 + 0.9, 1.5 + 0.9, 0.2, 0.2), mgp = c(1.45, 0.45, 0), cex = 1.25, bty='n')
})
options(warn=-1)
library(BayesGP)
data <- data.frame(year = seq(1821, 1934, by = 1), y = as.numeric(lynx))
data$x <- data$year - min(data$year)
plot(lynx)
prior_PSD <- list(u = 1, alpha = 0.01)
prior_SD <- BayesGP::prior_conversion_sGP(d = 50, prior = prior_PSD, a = 2*pi/10)
mod <- model_fit(formula = y ~ f(x = year,
model = "sGP",
a = 2*pi/10, k = 30,
sd.prior = list(prior = "exp", param = prior_SD, h = 2)) +
f(x = x,
model = "IID",
sd.prior = list(prior = "exp", param = 0.5)),
family = "Poisson",
data = data,
method = "MCMC")
mod <- model_fit(formula = y ~ f(x = year,
model = "sGP",
a = 2*pi/10, k = 30,
sd.prior = list(prior = "exp", param = prior_SD, h = 2)) +
f(x = x,
model = "IID",
sd.prior = list(prior = "exp", param = 0.5)),
family = "Poisson",
data = data,
method = "aghq")
object = mod
object$mod$marginals[[1]]
object$mod$marginals
summary(mod)
summary(mod$mod)
aaaaa <- summary(mod$mod)
aaaaa$summarytable
summary(mod)
summary(mod)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>", fig.height=3, fig.width=5, margins=TRUE
)
knitr::knit_hooks$set(margins = function(before, options, envir) {
if (!before) return()
graphics::par(mar = c(1.5 + 0.9, 1.5 + 0.9, 0.2, 0.2), mgp = c(1.45, 0.45, 0), cex = 1.25, bty='n')
})
options(warn=-1)
library(BayesGP)
data <- data.frame(year = seq(1821, 1934, by = 1), y = as.numeric(lynx))
data$x <- data$year - min(data$year)
plot(lynx)
prior_PSD <- list(u = 1, alpha = 0.01)
prior_SD <- BayesGP::prior_conversion_sGP(d = 50, prior = prior_PSD, a = 2*pi/10)
mod <- model_fit(formula = y ~ f(x = year,
model = "sGP",
a = 2*pi/10, k = 30,
sd.prior = list(prior = "exp", param = prior_SD, h = 2)) +
f(x = x,
model = "IID",
sd.prior = list(prior = "exp", param = 0.5)),
family = "Poisson",
data = data,
method = "aghq")
hyper_summary(mod, component = "year")
hyper_summary
devtools::document()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>", fig.height=3, fig.width=5, margins=TRUE
)
knitr::knit_hooks$set(margins = function(before, options, envir) {
if (!before) return()
graphics::par(mar = c(1.5 + 0.9, 1.5 + 0.9, 0.2, 0.2), mgp = c(1.45, 0.45, 0), cex = 1.25, bty='n')
})
options(warn=-1)
library(BayesGP)
head(covid_canada)
fit_result <- model_fit(new_deaths ~ weekdays1 + weekdays2 + weekdays3 + weekdays4 + weekdays5 + weekdays6 +
f(smoothing_var = t, model = "IWP", order = 3, k = 100, sd.prior = list(prior = "exp", param = list(u = 0.02, alpha = 0.5), h = 1)),
data = covid_canada, method = "aghq", family = "Poisson")
object <- object
object
object <- fit_result
names(object$fixed_samp_indexes)
names(object$random_samp_indexes)
result_list <- list()
result_list[[names(object$fixed_samp_indexes)[1]]] <- "1"
result_list
result_list <- list()
sample_fixed_effect
?sample_fixed_effect
fixed_name
fixed_name <- names(object$fixed_samp_indexes)[1]
fixed_name
sample_fixed_effect(object, variables = fixed_name)
fixed_density <- density(samps)
samps <- sample_fixed_effect(object, variables = fixed_name)
fixed_density <- density(samps)
fixed_density
plot(fixed_density$y ~ fixed_density$x)
plot(fixed_density$y ~ fixed_density$x, type = "l")
result_list <- list()
for (fixed_name in names(object$fixed_samp_indexes)) {
samps <- sample_fixed_effect(object, variables = fixed_name)
fixed_density <- density(samps)
result_list[[fixed_name]] <- data.frame(effect = fixed_density$x, post = fixed_density$y)
}
result_list
plot(result_list[[1]])
plot(result_list[[2]])
plot(result_list[[3]])
names(result_list)
names(object$random_samp_indexes)
for (random_name in names(object$random_samp_indexes)) {
result_list[[random_name]] <- var_density(object = object, component = random_name)
}
var_density <- function(object, component = NULL, h = NULL, theta_logprior = NULL, MCMC_samps_only = FALSE){
postsigma <- NULL
if(is.null(theta_logprior)){
theta_logprior <- function(theta,prior_alpha, prior_u) {
lambda <- -log(prior_alpha)/prior_u
log(lambda/2) - lambda * exp(-theta/2) - theta/2
}
}
priorfunc <- function(x,prior_alpha, prior_u) exp(theta_logprior(x,prior_alpha, prior_u))
priorfuncsigma <- function(x,prior_alpha, prior_u) (2/x) * exp(theta_logprior(-2*log(x), prior_alpha, prior_u))
if(any(class(object$mod) == "aghq")){
if(is.null(component)){
if(object$family != "Gaussian"){
stop("There is no family SD in the fitted model. Please indicate which component of the var-parameter that you want to show in `component`.")
}
theta_marg <- object$mod$marginals[[length(object$instances) + 1]]
if(nrow(theta_marg) <= 2){
stop("The number of quadrature points is too small, please use aghq_k >= 3.")
}
logpostsigma <- compute_pdf_and_cdf(theta_marg,list(totheta = function(x) -2*log(x),fromtheta = function(x) exp(-x/2)),interpolation = 'spline')
postsigma <- data.frame(SD = logpostsigma$transparam,
post = logpostsigma$pdf_transparam,
prior = priorfuncsigma(logpostsigma$transparam, prior_alpha = object$control.family$sd.prior$param$alpha, prior_u = object$control.family$sd.prior$param$u))
}
else{
for (i in 1:length(object$instances)) {
instance <- object$instances[[i]]
if(instance@smoothing_var == component){
theta_marg <- object$mod$marginals[[i]]
if(nrow(theta_marg) <= 2){
stop("The number of quadrature points is too small, please use aghq_k >= 3.")
}
logpostsigma <- compute_pdf_and_cdf(theta_marg,list(totheta = function(x) -2*log(x),fromtheta = function(x) exp(-x/2)),interpolation = 'spline')
postsigma <- data.frame(SD = logpostsigma$transparam,
post = logpostsigma$pdf_transparam,
prior = priorfuncsigma(logpostsigma$transparam, prior_alpha = object$instances[[i]]@sd.prior$param$alpha, prior_u = object$instances[[i]]@sd.prior$param$u))
if(is.null(h)){
if(!is.null(instance@sd.prior$h)){
h <- instance@sd.prior$h
}
}
if(!is.null(h)){
if(class(instance) == "IWP"){
p <- instance@order
correction <- sqrt((h^((2 * p) - 1)) / (((2 * p) - 1) * (factorial(p - 1)^2)))
}
else if(class(instance) == "sGP"){
correction <- 0
for (j in 1:instance@m) {
correction <- correction + compute_d_step_sGPsd(d = h, a = (j*instance@a))
}
}
else{
stop("PSD is currently on defined on IWP and sGP, please specify h = NULL for other type of random effect")
}
postsigmaPSD <- data.frame(PSD = postsigma$SD * correction,
post.PSD = postsigma$post / correction,
prior.PSD = postsigma$prior / correction)
postsigma <- cbind(postsigma, postsigmaPSD)
}
}
}
}
}
else if(any(class(object$mod) == "stanfit")){
sigmaPSD_marg_samps <- NULL
if(is.null(component)){
if(object$family != "Gaussian"){
stop("There is no family SD in the fitted model. Please indicate which component of the var-parameter that you want to show in `component`.")
}
theta_marg_samps <- object$samps$thet[[length(object$instances) + 1]]
sigma_marg_samps <- exp(-0.5*theta_marg_samps)
sigma_marg_density <- density(sigma_marg_samps)
postsigma <- data.frame(SD = sigma_marg_density$x,
post = sigma_marg_density$y,
prior = priorfuncsigma(sigma_marg_density$x, prior_alpha = object$control.family$sd.prior$param$alpha, prior_u = object$control.family$sd.prior$param$u))
}
else{
for (i in 1:length(object$instances)) {
instance <- object$instances[[i]]
if(instance@smoothing_var == component){
theta_marg_samps <- object$samps$thet[[i]]
sigma_marg_samps <- exp(-0.5*theta_marg_samps)
sigma_marg_density <- density(sigma_marg_samps)
postsigma <- data.frame(SD = sigma_marg_density$x,
post = sigma_marg_density$y,
prior = priorfuncsigma(sigma_marg_density$x, prior_alpha = object$instances[[i]]@sd.prior$param$alpha, prior_u = object$instances[[i]]@sd.prior$param$u))
if(is.null(h)){
if(!is.null(instance@sd.prior$h)){
h <- instance@sd.prior$h
}
}
if(!is.null(h)){
if(class(instance) == "IWP"){
p <- instance@order
correction <- sqrt((h^((2 * p) - 1)) / (((2 * p) - 1) * (factorial(p - 1)^2)))
}
else if(class(instance) == "sGP"){
correction <- 0
for (j in 1:instance@m) {
correction <- correction + compute_d_step_sGPsd(d = h, a = (j*instance@a))
}
}
else{
stop("PSD is currently on defined on IWP and sGP, please specify h = NULL for other type of random effect")
}
sigmaPSD_marg_samps <- sigma_marg_samps * correction
postsigmaPSD <- data.frame(PSD = postsigma$SD * correction,
post.PSD = postsigma$post / correction,
prior.PSD = postsigma$prior / correction)
postsigma <- cbind(postsigma, postsigmaPSD)
}
}
}
}
if(MCMC_samps_only == TRUE){
return(list(sigmaPSD_marg_samps = sigmaPSD_marg_samps, sigma_marg_samps = sigma_marg_samps))
}
}
else{
stop("The function `var_density` currently only supports model fittd with `method = aghq`.")
}
return(postsigma)
}
result_list[[random_name]] <- var_density(object = object, component = random_name)
result_list
result_list$t
object$family
if(object$family == "Gaussian"){
result_list[["family_var"]] <- var_density(object = object)
}
object
all_density <- para_density(object)
para_density <- function(object){
result_list <- list()
for (fixed_name in names(object$fixed_samp_indexes)) {
samps <- sample_fixed_effect(object, variables = fixed_name)
fixed_density <- density(samps)
result_list[[fixed_name]] <- data.frame(effect = fixed_density$x, post = fixed_density$y)
}
for (random_name in names(object$random_samp_indexes)) {
result_list[[random_name]] <- var_density(object = object, component = random_name)
}
if(object$family == "Gaussian"){
result_list[["family_var"]] <- var_density(object = object)
}
return(result_list)
}
all_density <- para_density(object)
names(all_density)
load("/Users/ziangzhang/Desktop/BOBI/application/co2/BO_result.rda")
View(BO_result)
plot(BO_result$result$y ~ BO_result$result$x, type = "l")
BO_result$result
sort(BO_result$result, x)
sort(BO_result$result, by = x)
sort(BO_result$result, by = "x")
to_plot <- BO_result$result
to_plot <- dplyr::arrange(to_plot, x)
to_plot
plot(to_plot$y ~ to_plot$x, type = "l")
plot(to_plot$y ~ to_plot$x_original, type = "l")
all_density <- para_density(object)
all_density
names(all_density)
all_density[[1]]
compute_cdf <- function(data_frame){
new_data_frame <- list(x = data_frame$effect)
new_data_frame$cdf <- cumsum(data_frame$post) * c(diff(new_data_frame$x), 0)
new_data_frame
}
compute_cdf(all_density[[1]])
compute_cdf <- function(data_frame){
new_data_frame <- list(x = data_frame$effect)
new_data_frame$cdf <- cumsum(data_frame$post * c(diff(new_data_frame$x), 0))
new_data_frame
}
compute_cdf(all_density[[1]])
object$fixed_samp_indexes
names(object$fixed_samp_indexes)
all_cdf <- list()
compute_cdf <- function(x, y){
new_data_frame <- list(x = x)
new_data_frame$cdf <- cumsum(y * c(diff(x), 0))
new_data_frame
}
for (name in names(object$fixed_samp_indexes)) {
all_cdf[[name]] <- compute_cdf(x = all_density[[name]]$effect, y = all_density[[name]]$post)
}
all_cdf
all_cdf$Intercept
result_table <- data.frame(name = names(all_density))
result_table
quantiles[1]
quantiles = c(0.025, 0.5, 0.975)
quantiles[1]
data.frame(name = names(all_density), quantiles[1] = c())
quantiles[1]
toString(quantiles[1])
toString(quantiles)
?toString()
strsplit(toString(quantiles), split = ",")
strsplit(toString(quantiles), split = ", ")
unlist(strsplit(toString(quantiles), split = ", "))
unlist(strsplit(toString(quantiles), split = ", "))[1]
unlist(strsplit(toString(quantiles), split = ", "))[2]
unlist(strsplit(toString(quantiles), split = ", "))[3]
result_table <- c("name", unlist(strsplit(toString(quantiles), split = ", ")))
result_table
result_table <- c("name", "median", unlist(strsplit(toString(quantiles), split = ", ")))
result_table
name
all_cdf[[name]]
all_cdf[[name]]$cdf
which(all_cdf[[name]]$cdf <= quantiles)
q <- quantiles[1]
which(all_cdf[[name]]$cdf <= q)
x[max([which(all_cdf[[name]]$cdf <= q)]
x[max(which(all_cdf[[name]]$cdf <= q)]
all_cdf$x[max(which(all_cdf[[name]]$cdf <= q)]
all_cdf$x[max(which(all_cdf[[name]]$cdf <= q))]
all_cdf[[name]]$x[max(which(all_cdf[[name]]$cdf <= q))]
to_add <- c(name, all_cdf[[name]]$x[max(which(all_cdf[[name]]$cdf <= 0.5))])
to_add
for (q in quantiles) {
to_add <- c(to_add, all_cdf[[name]]$x[max(which(all_cdf[[name]]$cdf <= q))])
}
to_add
result_table <- rbind(result_table, to_add)
result_table
result_table <- c("name", "median", unlist(strsplit(toString(quantiles), split = ", ")))
for (name in names(object$fixed_samp_indexes)) {
all_cdf[[name]] <- compute_cdf(x = all_density[[name]]$effect, y = all_density[[name]]$post)
to_add <- c(name, all_cdf[[name]]$x[max(which(all_cdf[[name]]$cdf <= 0.5))])
for (q in quantiles) {
to_add <- c(to_add, all_cdf[[name]]$x[max(which(all_cdf[[name]]$cdf <= q))])
}
result_table <- rbind(result_table, to_add)
}
result_table
result_table <- c("name", "median", unlist(strsplit(toString(quantiles), split = ", "), "prior", "prior:P1", "prior:P2"))
result_table <- c("name", "median", unlist(strsplit(toString(quantiles), split = ", ")), "prior", "prior:P1", "prior:P2")
result_table
object$instances
to_add <- (to_add, "Normal", "betamean", "1/betaprec")
result_table <- c("name", "median", unlist(strsplit(toString(quantiles), split = ", ")), "prior", "prior:P1", "prior:P2")
for (name in names(object$fixed_samp_indexes)) {
all_cdf[[name]] <- compute_cdf(x = all_density[[name]]$effect, y = all_density[[name]]$post)
to_add <- c(name, all_cdf[[name]]$x[max(which(all_cdf[[name]]$cdf <= 0.5))])
for (q in quantiles) {
to_add <- c(to_add, all_cdf[[name]]$x[max(which(all_cdf[[name]]$cdf <= q))])
}
to_add <- c(to_add, "Normal", "betamean", "1/betaprec")
result_table <- rbind(result_table, to_add)
}
result_table
names(object$random_samp_indexes)
name <- "t"
for (name in names(object$random_samp_indexes)) {
all_cdf[[name]] <- compute_cdf(x = all_density[[name]]$PSD, y = all_density[[name]]$post.PSD)
to_add <- c(name, all_cdf[[name]]$x[max(which(all_cdf[[name]]$cdf <= 0.5))])
for (q in quantiles) {
to_add <- c(to_add, all_cdf[[name]]$x[max(which(all_cdf[[name]]$cdf <= q))])
}
to_add <- c(to_add, "Exponential", "u", "alpha")
result_table <- rbind(result_table, to_add)
}
result_table
as.data.frame(result_table)
data.frame(result_table)
result_table[1,]
result_table <- data.frame(result_table, row.names = result_table[1,])
data.frame(result_table, row.names = result_table[1,])
result_table[1,]
data.frame(result_table, name = result_table[1,])
data.frame(result_table, name = result_table[1,])
unname(result_table)
data.frame(unname(result_table), name = result_table[1,])
result_table[1,]
?data.frame
data.frame(unname(result_table), name = 1)
unname(result_table)
data.frame(unname(result_table), row.names = 1)
data.frame(unname(result_table), row.names = 1, header = T)
colnames(result_table)
colnames(result_table) <- result_table[1,]
result_table
result_table[-1,]
result_table <- data.frame(unname(result_table), row.names = 1, header = T)
result_table
result_table[1,]
unname(result_table)[1,]
colnames(result_table) <- unname(result_table)[1,]
result_table <- data.frame(unname(result_table), row.names = 1)
colnames(result_table) <- unname(result_table)[1,]
result_table
result_table[-1,]
result_table
result_table <- c("name", "median", unlist(strsplit(toString(quantiles), split = ", ")), "prior", "prior:P1", "prior:P2")
for (name in names(object$fixed_samp_indexes)) {
all_cdf[[name]] <- compute_cdf(x = all_density[[name]]$effect, y = all_density[[name]]$post)
to_add <- c(name, all_cdf[[name]]$x[max(which(all_cdf[[name]]$cdf <= 0.5))])
for (q in quantiles) {
to_add <- c(to_add, all_cdf[[name]]$x[max(which(all_cdf[[name]]$cdf <= q))])
}
to_add <- c(to_add, "Normal", "betamean", "1/betaprec")
result_table <- rbind(result_table, to_add)
}
for (name in names(object$random_samp_indexes)) {
all_cdf[[name]] <- compute_cdf(x = all_density[[name]]$PSD, y = all_density[[name]]$post.PSD)
to_add <- c(name, all_cdf[[name]]$x[max(which(all_cdf[[name]]$cdf <= 0.5))])
for (q in quantiles) {
to_add <- c(to_add, all_cdf[[name]]$x[max(which(all_cdf[[name]]$cdf <= q))])
}
to_add <- c(to_add, "Exponential", "u", "alpha")
result_table <- rbind(result_table, to_add)
}
result_table
data.frame(unname(result_table), row.names = 1)
result_table <- c("name", "median", unlist(strsplit(toString(quantiles), split = ", ")), "prior", "prior:P1", "prior:P2")
for (name in names(object$fixed_samp_indexes)) {
all_cdf[[name]] <- compute_cdf(x = all_density[[name]]$effect, y = all_density[[name]]$post)
to_add <- c(name, all_cdf[[name]]$x[max(which(all_cdf[[name]]$cdf <= 0.5))])
for (q in quantiles) {
to_add <- c(to_add, all_cdf[[name]]$x[max(which(all_cdf[[name]]$cdf <= q))])
}
to_add <- c(to_add, "Normal", "betamean", "1/betaprec")
result_table <- rbind(result_table, to_add)
}
for (name in names(object$random_samp_indexes)) {
all_cdf[[name]] <- compute_cdf(x = all_density[[name]]$PSD, y = all_density[[name]]$post.PSD)
to_add <- c(name, all_cdf[[name]]$x[max(which(all_cdf[[name]]$cdf <= 0.5))])
for (q in quantiles) {
to_add <- c(to_add, all_cdf[[name]]$x[max(which(all_cdf[[name]]$cdf <= q))])
}
to_add <- c(to_add, "Exponential", "u", "alpha")
result_table <- rbind(result_table, to_add)
}
result_table <- data.frame(unname(result_table))
result_table
colnames(result_table) <- unname(result_table)[1,]
result_table
result_table[-1,]
a <- Inf
a == Inf
a >= Inf
a >= 1
a <- matrix(c(1,2,3,4), nrow = 2)
a
a[,2]
a[,2] <- 0
a
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>", fig.height=3, fig.width=5, margins=TRUE
)
knitr::knit_hooks$set(margins = function(before, options, envir) {
if (!before) return()
graphics::par(mar = c(1.5 + 0.9, 1.5 + 0.9, 0.2, 0.2), mgp = c(1.45, 0.45, 0), cex = 1.25, bty='n')
})
options(warn=-1)
library(BayesGP)
data <- data.frame(year = seq(1821, 1934, by = 1), y = as.numeric(lynx))
data$x <- data$year - min(data$year)
plot(lynx)
prior_PSD <- list(u = 1, alpha = 0.01)
prior_SD <- BayesGP::prior_conversion_sGP(d = 50, prior = prior_PSD, a = 2*pi/10)
mod <- model_fit(formula = y ~ f(x = year,
model = "sGP",
a = 2*pi/10, k = 30,
sd.prior = list(prior = "exp", param = prior_SD, h = 2)) +
f(x = x,
model = "IID",
sd.prior = list(prior = "exp", param = 0.5)),
family = "Poisson",
data = data,
method = "aghq")
summary(mod)
pred_sGP <- predict(mod, variable = "year", newdata = data.frame(year = seq(min(data$year), max(data$year), by = 0.1)))
plot(mean ~ year, data = pred_sGP, type = 'l', col = 'black')
lines(pupper ~ year, data = pred_sGP, lty = 'dashed', col = 'grey')
pred_sGP
pred_sGP <- predict(mod, variable = "year", newdata = data.frame(year = seq(min(data$year), max(data$year), by = 0.1)))
plot(mean ~ year, data = pred_sGP, type = 'l', col = 'black')
lines(q0.025 ~ year, data = pred_sGP, lty = 'dashed', col = 'grey')
lines(q0.975 ~ year, data = pred_sGP, lty = 'dashed', col = 'grey')
pred_sGP <- predict(mod, variable = "year", newdata = data.frame(year = seq(min(data$year), max(data$year), by = 0.1)))
plot(mean ~ year, data = pred_sGP, type = 'l', col = 'black')
lines(q0.025 ~ year, data = pred_sGP, lty = 'dashed', col = 'grey')
lines(q0.975 ~ year, data = pred_sGP, lty = 'dashed', col = 'grey')
