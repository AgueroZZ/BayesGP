result_table <- data.frame(unname(result_table), row.names = 1, header = T)
result_table
result_table[1,]
unname(result_table)[1,]
colnames(result_table) <- unname(result_table)[1,]
result_table <- data.frame(unname(result_table), row.names = 1)
colnames(result_table) <- unname(result_table)[1,]
result_table
result_table[-1,]
result_table
result_table <- c("name", "median", unlist(strsplit(toString(quantiles), split = ", ")), "prior", "prior:P1", "prior:P2")
for (name in names(object$fixed_samp_indexes)) {
all_cdf[[name]] <- compute_cdf(x = all_density[[name]]$effect, y = all_density[[name]]$post)
to_add <- c(name, all_cdf[[name]]$x[max(which(all_cdf[[name]]$cdf <= 0.5))])
for (q in quantiles) {
to_add <- c(to_add, all_cdf[[name]]$x[max(which(all_cdf[[name]]$cdf <= q))])
}
to_add <- c(to_add, "Normal", "betamean", "1/betaprec")
result_table <- rbind(result_table, to_add)
}
for (name in names(object$random_samp_indexes)) {
all_cdf[[name]] <- compute_cdf(x = all_density[[name]]$PSD, y = all_density[[name]]$post.PSD)
to_add <- c(name, all_cdf[[name]]$x[max(which(all_cdf[[name]]$cdf <= 0.5))])
for (q in quantiles) {
to_add <- c(to_add, all_cdf[[name]]$x[max(which(all_cdf[[name]]$cdf <= q))])
}
to_add <- c(to_add, "Exponential", "u", "alpha")
result_table <- rbind(result_table, to_add)
}
result_table
data.frame(unname(result_table), row.names = 1)
result_table <- c("name", "median", unlist(strsplit(toString(quantiles), split = ", ")), "prior", "prior:P1", "prior:P2")
for (name in names(object$fixed_samp_indexes)) {
all_cdf[[name]] <- compute_cdf(x = all_density[[name]]$effect, y = all_density[[name]]$post)
to_add <- c(name, all_cdf[[name]]$x[max(which(all_cdf[[name]]$cdf <= 0.5))])
for (q in quantiles) {
to_add <- c(to_add, all_cdf[[name]]$x[max(which(all_cdf[[name]]$cdf <= q))])
}
to_add <- c(to_add, "Normal", "betamean", "1/betaprec")
result_table <- rbind(result_table, to_add)
}
for (name in names(object$random_samp_indexes)) {
all_cdf[[name]] <- compute_cdf(x = all_density[[name]]$PSD, y = all_density[[name]]$post.PSD)
to_add <- c(name, all_cdf[[name]]$x[max(which(all_cdf[[name]]$cdf <= 0.5))])
for (q in quantiles) {
to_add <- c(to_add, all_cdf[[name]]$x[max(which(all_cdf[[name]]$cdf <= q))])
}
to_add <- c(to_add, "Exponential", "u", "alpha")
result_table <- rbind(result_table, to_add)
}
result_table <- data.frame(unname(result_table))
result_table
colnames(result_table) <- unname(result_table)[1,]
result_table
result_table[-1,]
a <- Inf
a == Inf
a >= Inf
a >= 1
a <- matrix(c(1,2,3,4), nrow = 2)
a
a[,2]
a[,2] <- 0
a
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>", fig.height=3, fig.width=5, margins=TRUE
)
knitr::knit_hooks$set(margins = function(before, options, envir) {
if (!before) return()
graphics::par(mar = c(1.5 + 0.9, 1.5 + 0.9, 0.2, 0.2), mgp = c(1.45, 0.45, 0), cex = 1.25, bty='n')
})
options(warn=-1)
library(BayesGP)
data <- data.frame(year = seq(1821, 1934, by = 1), y = as.numeric(lynx))
data$x <- data$year - min(data$year)
plot(lynx)
prior_PSD <- list(u = 1, alpha = 0.01)
prior_SD <- BayesGP::prior_conversion_sGP(d = 50, prior = prior_PSD, a = 2*pi/10)
mod <- model_fit(formula = y ~ f(x = year,
model = "sGP",
a = 2*pi/10, k = 30,
sd.prior = list(prior = "exp", param = prior_SD, h = 2)) +
f(x = x,
model = "IID",
sd.prior = list(prior = "exp", param = 0.5)),
family = "Poisson",
data = data,
method = "aghq")
summary(mod)
pred_sGP <- predict(mod, variable = "year", newdata = data.frame(year = seq(min(data$year), max(data$year), by = 0.1)))
plot(mean ~ year, data = pred_sGP, type = 'l', col = 'black')
lines(pupper ~ year, data = pred_sGP, lty = 'dashed', col = 'grey')
pred_sGP
pred_sGP <- predict(mod, variable = "year", newdata = data.frame(year = seq(min(data$year), max(data$year), by = 0.1)))
plot(mean ~ year, data = pred_sGP, type = 'l', col = 'black')
lines(q0.025 ~ year, data = pred_sGP, lty = 'dashed', col = 'grey')
lines(q0.975 ~ year, data = pred_sGP, lty = 'dashed', col = 'grey')
pred_sGP <- predict(mod, variable = "year", newdata = data.frame(year = seq(min(data$year), max(data$year), by = 0.1)))
plot(mean ~ year, data = pred_sGP, type = 'l', col = 'black')
lines(q0.025 ~ year, data = pred_sGP, lty = 'dashed', col = 'grey')
lines(q0.975 ~ year, data = pred_sGP, lty = 'dashed', col = 'grey')
10/0.01
x <- seq(0,10, length.out = 5000)
x
options(prompt = 'R> ', continue = '+ ')
plot(Deaths ~ date, data = BayesGP::PEN_death)
library(BayesGP)
mod <- model_fit(Deaths ~ f(time, model = "IWP", order = 3, knots = 50,
sd.prior = list(param = 0.1, h = 1)) +
f(date, model = "IID", sd.prior = list(param = 0.1)) +
offset(log_days),
data = PEN_death, family = "Poisson")
summary(mod)
sd_plot(mod, component = "time")
PSD_aghq <- sd_density(mod, component = "time")
str(PSD_aghq)
options(prompt = 'R> ', continue = '+ ')
plot(Deaths ~ date, data = BayesGP::PEN_death)
library(BayesGP)
mod <- model_fit(Deaths ~ f(time, model = "IWP", order = 3, knots = 50,
sd.prior = list(param = 0.1, h = 1)) +
f(date, model = "IID", sd.prior = list(param = 0.1)) +
offset(log_days),
data = PEN_death, family = "Poisson")
summary(mod)
sd_plot(mod, component = "time")
PSD_aghq <- sd_density(mod, component = "time")
str(PSD_aghq)
plot(mod)
samps_sex <- sample_fixed_effect(mod, variables = "sex")
options(prompt = 'R> ', continue = '+ ')
plot(Deaths ~ date, data = BayesGP::PEN_death)
library(BayesGP)
mod <- model_fit(Deaths ~ f(time, model = "IWP", order = 3, knots = 50,
sd.prior = list(param = 0.1, h = 1)) +
f(date, model = "IID", sd.prior = list(param = 0.1)) +
offset(log_days),
data = PEN_death, family = "Poisson")
summary(mod)
sd_plot(mod, component = "time")
PSD_aghq <- sd_density(mod, component = "time")
str(PSD_aghq)
plot(mod)
mod <- model_fit(formula = time ~ sex +
f(x = age, model = "IWP", order = 2, knots = 50,
sd.prior = list(param = 1, h = 10)) +
f(x = id, model = "IID",
sd.prior = list(param = 1)),
family = "coxph",
cens = "status",
data = data)
data <- survival::kidney
head(data)
mod <- model_fit(formula = time ~ sex +
f(x = age, model = "IWP", order = 2, knots = 50,
sd.prior = list(param = 1, h = 10)) +
f(x = id, model = "IID",
sd.prior = list(param = 1)),
family = "coxph",
cens = "status",
data = data)
samps_sex <- sample_fixed_effect(mod, variables = "sex")
samps_sex
density(samps_sex)
plot(density(samps_sex))
sd_density
dd <- sd_density(object = mod, component = "sx")
dd <- sd_density(object = mod, component = "age")
dd
dd <- sd_density(object = mod, component = "age", h = NULL)
dd
dd <- sd_density(object = mod, component = "age", h = 5)
dd
dd <- sd_density(object = mod, component = "age", h = NULL)
post_dens <- sd_density(object = mod, component = "age", h = NULL)
"PSD" %in% colnames(post_dens)
colnames(post_dens)
post_dens <- post_dens[, c("PSD", "post.PSD")]
post_dens
sum(post_dens[,2])
sum(post_dens[,2] * c(0, diff(post_dens[,1])))
sum(post_dens[,2] * c(diff(post_dens[,1],0)))
sum(post_dens[,2] * c(diff(post_dens[,1]),0))
sample_sd <- function(model_fit, variables, M = NULL, h = NULL){
if(is.null(M)){
K <- nrow(model_fit$samps$samps)
}
selected_samps <- matrix(0, nrow = M, ncol = length(variables))
for (variable in variables) {
post_dens <- sd_density(object = model_fit, component = variable, h = h)
if("PSD" %in% colnames(post_dens)){
post_dens <- post_dens[, c("PSD", "post.PSD")]
}else{
post_dens <- post_dens[, c("SD", "post")]
}
# convert density to probability for sampling
post_dens[,2] <- post_dens[,2] / sum(post_dens[,2])
selected_samps[,1] <- sample(post_dens[,1], size = M, replace = TRUE, prob = post_dens[,2])
}
colnames(selected_samps) <- variables
return(selected_samps)
}
sample_sd(model_fit = mod, variables = c("age"))
matrix(0, nrow = M, ncol = 1)
matrix(0, nrow = 3, ncol = 1)
sample_sd <- function(model_fit, variables, M = NULL, h = NULL){
if(is.null(M)){
M <- nrow(model_fit$samps$samps)
}
selected_samps <- matrix(0, nrow = M, ncol = length(variables))
for (variable in variables) {
post_dens <- sd_density(object = model_fit, component = variable, h = h)
if("PSD" %in% colnames(post_dens)){
post_dens <- post_dens[, c("PSD", "post.PSD")]
}else{
post_dens <- post_dens[, c("SD", "post")]
}
# convert density to probability for sampling
post_dens[,2] <- post_dens[,2] / sum(post_dens[,2])
selected_samps[,1] <- sample(post_dens[,1], size = M, replace = TRUE, prob = post_dens[,2])
}
colnames(selected_samps) <- variables
return(selected_samps)
}
sample_sd(model_fit = mod, variables = c("age"))
hist(sample_sd(model_fit = mod, variables = c("age")))
plot(density(sample_sd(model_fit = mod, variables = c("age"))))
sample_sd(model_fit = mod, variables = c("age"), M = 30000)
sample_sd <- function(model_fit, variables, M = NULL, h = NULL){
if(is.null(M)){
M <- nrow(model_fit$samps$samps)
}
selected_samps <- matrix(0, nrow = M, ncol = length(variables))
for (j in 1:length(variables)) {
variable = variables[j]
post_dens <- sd_density(object = model_fit, component = variable, h = h)
if("PSD" %in% colnames(post_dens)){
post_dens <- post_dens[, c("PSD", "post.PSD")]
}else{
post_dens <- post_dens[, c("SD", "post")]
}
# convert density to probability for sampling
post_dens[,2] <- post_dens[,2] / sum(post_dens[,2])
selected_samps[,j] <- sample(post_dens[,1], size = M, replace = TRUE, prob = post_dens[,2])
}
colnames(selected_samps) <- variables
return(selected_samps)
}
sample_sd(model_fit = mod, variables = c("id","age"))
sample_sd(model_fit = mod, variables = c("id","age"), h = 3)
sample_sd(model_fit = mod, variables = c("id","age"))
sample_sd(model_fit = mod, variables = c("age","id"))
sample_post <- function(model_fit, variables, M = NULL, h = NULL){
post_samps <- matrix(0, nrow = M, ncol = length(variables))
for (j in 1:length(variables)){
variable = variables[j]
if(variable %in% names(model_fit$fixed_samp_indexes)){
post_samps[,j] <- sample_fixed_effect(model_fit, variables = variable, M = M)
}else if(variable %in% names(model_fit$random_samp_indexes)){
post_samps[,j] <- sample_sd(model_fit, variables = variable, M = M, h = h)
}else{
stop("The specified variable cannot be found in the fitted model, please check the name.")
}
}
colnames(post_samps) <- variables
return(post_samps)
}
sample_post(model_fit = mod, variables = c("id","age","sex"))
sample_fixed_effect <- function(model_fit, variables, M = NULL){
if(is.null(M)){
M <- nrow(model_fit$samps$samps)
}
samps <- model_fit$samps$samps
index <- model_fit$fixed_samp_indexes[variables]
selected_samps <- t(samps[unlist(index), ,drop = FALSE])
colnames(selected_samps) <- variables
if(M == nrow(selected_samps)){
return(selected_samps)
}else{
return(selected_samps[sample(1:nrow(selected_samps), M, replace = TRUE), ])
}
}
sample_sd <- function(model_fit, variables, M = NULL, h = NULL){
if(is.null(M)){
M <- nrow(model_fit$samps$samps)
}
selected_samps <- matrix(0, nrow = M, ncol = length(variables))
for (j in 1:length(variables)) {
variable = variables[j]
post_dens <- sd_density(object = model_fit, component = variable, h = h)
if("PSD" %in% colnames(post_dens)){
post_dens <- post_dens[, c("PSD", "post.PSD")]
}else{
post_dens <- post_dens[, c("SD", "post")]
}
# convert density to probability for sampling
post_dens[,2] <- post_dens[,2] / sum(post_dens[,2])
selected_samps[,j] <- sample(post_dens[,1], size = M, replace = TRUE, prob = post_dens[,2])
}
colnames(selected_samps) <- variables
return(selected_samps)
}
sample_post <- function(model_fit, variables, M = NULL, h = NULL){
post_samps <- matrix(0, nrow = M, ncol = length(variables))
for (j in 1:length(variables)){
variable = variables[j]
if(variable %in% names(model_fit$fixed_samp_indexes)){
post_samps[,j] <- sample_fixed_effect(model_fit, variables = variable, M = M)
}else if(variable %in% names(model_fit$random_samp_indexes)){
post_samps[,j] <- sample_sd(model_fit, variables = variable, M = M, h = h)
}else{
stop("The specified variable cannot be found in the fitted model, please check the name.")
}
}
colnames(post_samps) <- variables
return(post_samps)
}
sample_post(model_fit = mod, variables = c("id","age","sex"))
sample_post <- function(model_fit, variables, M = NULL, h = NULL){
if(is.null(M)){
M <- nrow(model_fit$samps$samps)
}
post_samps <- matrix(0, nrow = M, ncol = length(variables))
for (j in 1:length(variables)){
variable = variables[j]
if(variable %in% names(model_fit$fixed_samp_indexes)){
post_samps[,j] <- sample_fixed_effect(model_fit, variables = variable, M = M)
}else if(variable %in% names(model_fit$random_samp_indexes)){
post_samps[,j] <- sample_sd(model_fit, variables = variable, M = M, h = h)
}else{
stop("The specified variable cannot be found in the fitted model, please check the name.")
}
}
colnames(post_samps) <- variables
return(post_samps)
}
sample_post(model_fit = mod, variables = c("id","age","sex"))
sample_post(model_fit = mod, variables = c("id","sex","age"))
sample_post <- function(model_fit, variables, M = NULL, h = NULL){
if(is.null(M)){
M <- ncol(model_fit$samps$samps)
}
post_samps <- matrix(0, nrow = M, ncol = length(variables))
for (j in 1:length(variables)){
variable = variables[j]
if(variable %in% names(model_fit$fixed_samp_indexes)){
post_samps[,j] <- sample_fixed_effect(model_fit, variables = variable, M = M)
}else if(variable %in% names(model_fit$random_samp_indexes)){
post_samps[,j] <- sample_sd(model_fit, variables = variable, M = M, h = h)
}else{
stop("The specified variable cannot be found in the fitted model, please check the name.")
}
}
colnames(post_samps) <- variables
return(post_samps)
}
sample_post(model_fit = mod, variables = c("id","sex","age"))
dim(mod$samps$samps)
#' Extract the posterior samples from the fitted model for the target fixed variables.
#'
#' @param model_fit The result from model_fit().
#' @param variables A vector of names of the target fixed variables to sample.
#' @param M The number of samples to draw from the posterior distribution.
#' @return A matrix with columns being the posterior samples of the target fixed effect variables.
#' @export
sample_fixed_effect <- function(model_fit, variables, M = NULL){
if(is.null(M)){
M <- ncol(model_fit$samps$samps)
}
samps <- model_fit$samps$samps
index <- model_fit$fixed_samp_indexes[variables]
selected_samps <- t(samps[unlist(index), ,drop = FALSE])
colnames(selected_samps) <- variables
if(M == ncol(selected_samps)){
return(selected_samps)
}else{
return(selected_samps[sample(1:ncol(selected_samps), M, replace = TRUE), ])
}
}
#' Extract the posterior samples from the fitted model for the target standard deviation.
#'
#' @param model_fit The result from model_fit().
#' @param variables A vector of names of the target standard deviation to sample.
#' @param M The number of samples to draw from the posterior distribution.
#' @param h The unit of predictive step to consider, by default is set to `NULL`, indicating the result is using the same `h` as in the model fitting.
#' @return A matrix with columns being the posterior samples of the target sd variables.
#' @export
sample_sd <- function(model_fit, variables, M = NULL, h = NULL){
if(is.null(M)){
M <- ncol(model_fit$samps$samps)
}
selected_samps <- matrix(0, nrow = M, ncol = length(variables))
for (j in 1:length(variables)) {
variable = variables[j]
post_dens <- sd_density(object = model_fit, component = variable, h = h)
if("PSD" %in% colnames(post_dens)){
post_dens <- post_dens[, c("PSD", "post.PSD")]
}else{
post_dens <- post_dens[, c("SD", "post")]
}
# convert density to probability for sampling
post_dens[,2] <- post_dens[,2] / sum(post_dens[,2])
selected_samps[,j] <- sample(post_dens[,1], size = M, replace = TRUE, prob = post_dens[,2])
}
colnames(selected_samps) <- variables
return(selected_samps)
}
#' Extract the posterior samples from the fitted model for the target parameters.
#'
#' @param model_fit The result from model_fit().
#' @param variables A vector of names of the target parameters to sample.
#' @param M The number of samples to draw from the posterior distribution.
#' @param h The unit of predictive step to consider, by default is set to `NULL`, indicating the result is using the same `h` as in the model fitting.
#' @return A matrix with columns being the posterior samples of the target parameters.
#' @export
sample_post <- function(model_fit, variables, M = NULL, h = NULL){
if(is.null(M)){
M <- ncol(model_fit$samps$samps)
}
post_samps <- matrix(0, nrow = M, ncol = length(variables))
for (j in 1:length(variables)){
variable = variables[j]
if(variable %in% names(model_fit$fixed_samp_indexes)){
post_samps[,j] <- sample_fixed_effect(model_fit, variables = variable, M = M)
}else if(variable %in% names(model_fit$random_samp_indexes)){
post_samps[,j] <- sample_sd(model_fit, variables = variable, M = M, h = h)
}else{
stop("The specified variable cannot be found in the fitted model, please check the name.")
}
}
colnames(post_samps) <- variables
return(post_samps)
}
sample_post(model_fit = mod, variables = c("id","sex","age"))
sample_fixed_effect <- function(model_fit, variables, M = NULL){
if(is.null(M)){
M <- ncol(model_fit$samps$samps)
}
samps <- model_fit$samps$samps
index <- model_fit$fixed_samp_indexes[variables]
selected_samps <- t(samps[unlist(index), ,drop = FALSE])
colnames(selected_samps) <- variables
if(M == ncol(selected_samps)){
return(selected_samps)
}else{
return(selected_samps[sample(1:nrow(selected_samps), M, replace = TRUE), ])
}
}
#' Extract the posterior samples from the fitted model for the target standard deviation.
#'
#' @param model_fit The result from model_fit().
#' @param variables A vector of names of the target standard deviation to sample.
#' @param M The number of samples to draw from the posterior distribution.
#' @param h The unit of predictive step to consider, by default is set to `NULL`, indicating the result is using the same `h` as in the model fitting.
#' @return A matrix with columns being the posterior samples of the target sd variables.
#' @export
sample_sd <- function(model_fit, variables, M = NULL, h = NULL){
if(is.null(M)){
M <- ncol(model_fit$samps$samps)
}
selected_samps <- matrix(0, nrow = M, ncol = length(variables))
for (j in 1:length(variables)) {
variable = variables[j]
post_dens <- sd_density(object = model_fit, component = variable, h = h)
if("PSD" %in% colnames(post_dens)){
post_dens <- post_dens[, c("PSD", "post.PSD")]
}else{
post_dens <- post_dens[, c("SD", "post")]
}
# convert density to probability for sampling
post_dens[,2] <- post_dens[,2] / sum(post_dens[,2])
selected_samps[,j] <- sample(post_dens[,1], size = M, replace = TRUE, prob = post_dens[,2])
}
colnames(selected_samps) <- variables
return(selected_samps)
}
#' Extract the posterior samples from the fitted model for the target parameters.
#'
#' @param model_fit The result from model_fit().
#' @param variables A vector of names of the target parameters to sample.
#' @param M The number of samples to draw from the posterior distribution.
#' @param h The unit of predictive step to consider, by default is set to `NULL`, indicating the result is using the same `h` as in the model fitting.
#' @return A matrix with columns being the posterior samples of the target parameters.
#' @export
sample_post <- function(model_fit, variables, M = NULL, h = NULL){
if(is.null(M)){
M <- ncol(model_fit$samps$samps)
}
post_samps <- matrix(0, nrow = M, ncol = length(variables))
for (j in 1:length(variables)){
variable = variables[j]
if(variable %in% names(model_fit$fixed_samp_indexes)){
post_samps[,j] <- sample_fixed_effect(model_fit, variables = variable, M = M)
}else if(variable %in% names(model_fit$random_samp_indexes)){
post_samps[,j] <- sample_sd(model_fit, variables = variable, M = M, h = h)
}else{
stop("The specified variable cannot be found in the fitted model, please check the name.")
}
}
colnames(post_samps) <- variables
return(post_samps)
}
sample_post(model_fit = mod, variables = c("id","sex","age"))
para_density(mod)
jj <- para_density(mod)
names(jj)
jj[c("age","sex")]
jj <- jj[c("age","sex")]
names(jj)
source("~/Desktop/BayesGP/R/03_post_fit.R")
plot(mod)
